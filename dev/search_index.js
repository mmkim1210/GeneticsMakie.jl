var documenterSearchIndex = {"docs":
[{"location":"examples/isoforms/#Plotting-isoforms","page":"Plotting isoforms","title":"Plotting isoforms","text":"","category":"section"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"After Parsing GENCODE, it is possible to plot isoform bodies. We can focus on NRXN1 gene as our initial example. GeneticsMakie.plotisoforms! returns  genomic coordinates for the gene of interest so that an appropriate label can be passed onto  GeneticsMakie.labelgenome. NRXN1 gene has many isoforms as we see below, and even more  isoforms are likely to be discovered in the future. For this reason, plotting isoforms of multiple genes is not available. ","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CairoMakie\", \"DataFrames\", \"Arrow\"])\n\nusing GeneticsMakie, CairoMakie, DataFrames, Arrow\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\ngencode = Arrow.Table(\"data/gencode/$(splitext(basename(url))[1]).arrow\")|> DataFrame","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"isdir(\"figs\") || mkdir(\"figs\")\nset_theme!(font = \"Arial\")\n\ngene = \"NRXN1\"\nf = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs, chr, range1, range2 = GeneticsMakie.plotisoforms!(ax, gene, gencode; height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, range1, range2)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"(Image: )","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"To save some space, we can plot the isoform labels on the left by using the text keyword argument. ","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs, chr, range1, range2 = GeneticsMakie.plotisoforms!(ax, gene, gencode; height = 0.1, text = :l)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, range1, range2)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"(Image: )","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"We can change the color of isoforms and text using the isoformcolor and textcolor keyword arguments, respectively. We look at a different gene, GRIN2A.","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"gene = \"GRIN2A\"\nf = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs, chr, range1, range2 = GeneticsMakie.plotisoforms!(ax, gene, gencode; isoformcolor = :forestgreen, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, range1, range2)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"(Image: )","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"We can change the order of isoforms by using the orderby keyword argument.","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs, chr, range1, range2 = GeneticsMakie.plotisoforms!(ax, gene, gencode; orderby = [\"ENST00000675189\", \"ENST00000463531\"], isoformcolor = :forestgreen, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, range1, range2)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"(Image: )","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs, chr, range1, range2 = GeneticsMakie.plotisoforms!(ax, gene, gencode; orderby = [\"ENST00000675189\", \"ENST00000463531\"], \n    highlight = ([\"ENST00000675398\", \"ENST00000562109\"], fill(:brown3, 2)), isoformcolor = :forestgreen, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, range1, range2)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/isoforms/","page":"Plotting isoforms","title":"Plotting isoforms","text":"(Image: )","category":"page"},{"location":"examples/gwas/#Plotting-GWAS","page":"Plotting GWAS","title":"Plotting GWAS","text":"","category":"section"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"After Munging summary statistics, we can use GeneticsMakie.plotgwas!  to draw Manhattan plots.","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CairoMakie\", \"DataFrames\", \"Arrow\"])","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"using GeneticsMakie, CairoMakie, DataFrames, Arrow\ndfs = DataFrame[]\nfor key in [\"height\", \"weight\"]\n    push!(dfs, Arrow.Table(\"data/gwas/$(key).arrow\")|> DataFrame)\nend\ntitles = [\"Height (Yengo et al. 2018)\", \"Weight (Yengo et al. 2018)\"]","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"f = Figure(resolution = (408, 792))\naxs = [Axis(f[i, 1]) for i in 1:length(titles)]\nfor i in eachindex(titles)\n    GeneticsMakie.plotgwas!(axs[i], dfs[i])\n    hidespines!(axs[i], :t, :r)\n    Label(f[i, 1, Top()], text = \"$(titles[i])\", fontsize = 8)\n    rowsize!(f.layout, i, 50)\n    i == length(titles) ? axs[i].xlabel = \"Chromosome\" : axs[i].xlabel = \"\"\nend\nrowgap!(f.layout, 10)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"(Image: )","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"By default, GeneticsMakie.plotgwas! highlights the genome-wide significant threshold and corresponding significant variants. We can turn off this option by using the linecolor and scattercolor keyword arguments. ","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"f = Figure(resolution = (408, 792))\naxs = [Axis(f[i, 1]) for i in 1:length(titles)]\nfor i in eachindex(titles)\n    GeneticsMakie.plotgwas!(axs[i], dfs[i]; linecolor = nothing, scattercolor = nothing)\n    hidespines!(axs[i], :t, :r)\n    Label(f[i, 1, Top()], text = \"$(titles[i])\", fontsize = 8)\n    rowsize!(f.layout, i, 50)\n    i == length(titles) ? axs[i].xlabel = \"Chromosome\" : axs[i].xlabel = \"\"\nend\nrowgap!(f.layout, 10)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"(Image: )","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"We can color even and odd chromosomes with different colors by using the chromcolors keyword argument. ","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"f = Figure(resolution = (408, 792))\naxs = [Axis(f[i, 1]) for i in 1:length(titles)]\nfor i in eachindex(titles)\n    GeneticsMakie.plotgwas!(axs[i], dfs[i]; linecolor = nothing, scattercolor = nothing, \n        chromcolors = [\"#389826\", \"#9658B2\"])\n    hidespines!(axs[i], :t, :r)\n    Label(f[i, 1, Top()], text = \"$(titles[i])\", fontsize = 8)\n    rowsize!(f.layout, i, 50)\n    i == length(titles) ? axs[i].xlabel = \"Chromosome\" : axs[i].xlabel = \"\"\nend\nrowgap!(f.layout, 10)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"(Image: )","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"We can then use GeneticsMakie.plotqq! to draw QQ plots.","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"f = Figure(resolution = (408, 792))\naxs = [Axis(f[2, i]) for i in 1:length(titles)]\nfor i in eachindex(titles)\n    GeneticsMakie.plotqq!(axs[i], dfs[i]; ystep = 5)\n    axs[i].xlabel = \"\"\n    axs[i].ylabel = \"\"\n    ylims!(axs[i], 0, 40)\n    i > 1 ? hideydecorations!(axs[i]) : nothing\nend\nfor (i, title) in enumerate(titles)\n    Box(f[1, i], color = :gray90)\n    Label(f[1, i], title, tellwidth = false, fontsize = 8, padding = (0, 0, 3, 3))\nend\nLabel(f[3, 1:length(titles)], text = \"Expected -log[p]\", fontsize = 8)\nLabel(f[2, 0], text = \"Observed -log[p]\", fontsize = 8, rotation = pi / 2, tellheight = false)\nrowsize!(f.layout, 2, Aspect(2, 1))\ncolgap!(f.layout, 5)\nrowgap!(f.layout, 1, 0)\nrowgap!(f.layout, 2, 5)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/gwas/","page":"Plotting GWAS","title":"Plotting GWAS","text":"(Image: )","category":"page"},{"location":"examples/loops/#Plotting-loops","page":"Plotting loops","title":"Plotting loops","text":"","category":"section"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"Additionally, we can visualize long-range DNA interactions captured by ChIA-PET and Hi-C sequencing. A new track with these DNA interactions can be added upon the GENCODE annotations we have processed from Parsing GENCODE. As an example, we focus on the MYC locus in mammary epithelial cells, which has long-range enhancers that are implicated in various epithelial cancers (Spitz et al. 2016). In order to visualize loops within this locus, we will download long-range chromatin interactions provided by the ENCODE project.","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CairoMakie\", \"CSV\", \"DataFrames\", \"Arrow\"])","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"using GeneticsMakie, CairoMakie, CSV, DataFrames, Arrow, Downloads\nisdir(\"data/loops\") || mkdir(\"data/loops\")\nurl = \"https://www.encodeproject.org/files/ENCFF730CMY/@@download/ENCFF730CMY.bedpe.gz\"\nif !isfile(\"data/loops/$(splitext(basename(url))[1]).arrow\")\n    isfile(\"data/loops/$(basename(url))\") ||\n    Downloads.download(url, \"data/loops/$(basename(url))\")\n    df = CSV.read(\"data/loops/$(basename(url))\", DataFrame;\n                  delim = \"\\t\", skipto = 2, header = 0)\n    # Select relevant columns and harmonize chromosomes with GENCODE\n    select!(df,\n            :Column1 => (col -> replace.(col, \"chr\" => \"\")) => :chr1,\n            :Column2 => :x1, :Column3 => :x2,\n            :Column4 => (col -> replace.(col, \"chr\" => \"\")) => :chr2,\n            :Column5 => :y1, :Column6 => :y2,\n            :Column8 => :score)\n    Arrow.write(\"data/loops/$(splitext(basename(url))[1]).arrow\", df)\nend\ndfs = [Arrow.Table(\"data/loops/$(splitext(basename(url))[1]).arrow\") |> DataFrame]\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\ngencode = Arrow.Table(\"data/gencode/$(splitext(basename(url))[1]).arrow\")|> DataFrame","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"gene = \"MYC\"\nchr, start, stop = GeneticsMakie.findgene(gene, gencode)\nranges = [start - 1e6, stop + 1e6]\nn = length(dfs)\ntitles = [\"ENCFF730CMY\"]\n\nf = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:(n + 1)]\nfor i in 1:n\n    GeneticsMakie.plotloops!(axs[i], chr, ranges[1], ranges[2], dfs[i])\n    rowsize!(f.layout, i, 40)\n    Label(f[i, 1, Top()], \"$(titles[i])\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\nend\nrs = GeneticsMakie.plotgenes!(axs[n + 1], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, n + 1, rs)\nGeneticsMakie.labelgenome(f[n + 1, 1, Bottom()], chr, ranges[1], ranges[2])\nLabel(f[1:n, 0], text = \"Chromatin\\ninteractions\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:(n + 1)\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"(Image: )","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"We can zoom in closer to the gene body by setting a smaller genomic range. With this  closer look, we can see yellow boxes at the ends of the arcs, each representing the  anchors of each loop. The span and length of these interaction anchors is recorded  in the ChIA-PET BEDPE file and is set to reflect the length of a ChIP DNA fragment.","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"ranges = [start - 1e5, stop + 1e5]\n\nf = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:(n + 1)]\nfor i in 1:n\n    GeneticsMakie.plotloops!(axs[i], chr, ranges[1], ranges[2], dfs[i])\n    rowsize!(f.layout, i, 40)\n    Label(f[i, 1, Top()], \"$(titles[i])\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\nend\nrs = GeneticsMakie.plotgenes!(axs[n + 1], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, n + 1, rs)\nGeneticsMakie.labelgenome(f[n + 1, 1, Bottom()], chr, ranges[1], ranges[2])\nLabel(f[1:n, 0], text = \"Chromatin\\ninteractions\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:(n + 1)\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"(Image: )","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"We can change the color of the loops and anchors using the colorarc and colorend  keywords respectively.  Additionally, we can change the line width of the loops using  the linewidth keyword.","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"ranges = [start - 1e6, stop + 1e6]\n\nf = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:(n + 1)]\nfor i in 1:n\n    GeneticsMakie.plotloops!(axs[i], chr, ranges[1], ranges[2], dfs[i];\n    linewidth = 0.75, colorarc = \"#CB3C33\", colorend = \"#CB3C33\")\n    rowsize!(f.layout, i, 40)\n    Label(f[i, 1, Top()], \"$(titles[i])\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\nend\nrs = GeneticsMakie.plotgenes!(axs[n + 1], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, n + 1, rs)\nGeneticsMakie.labelgenome(f[n + 1, 1, Bottom()], chr, ranges[1], ranges[2])\nLabel(f[1:n, 0], text = \"Chromatin\\ninteractions\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:(n + 1)\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"(Image: )","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"By subsetting our data to what we wish to display, we can be more specific in what we wish to visualize. For example, if we wanted only the enhancer-promoter loops for MYC, we can filter our DataFrame to loops that link to the promoter region for MYC. Here we filter our DataFrame to loops that link within the MYC gene body and promoter. Additionally, by running GeneticsMakie.plotloops! on the same axis, we can overlay these loops on top of the previous full set of loops.","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"f = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:(n + 1)]\nfor i in 1:n\n    GeneticsMakie.plotloops!(axs[i], chr, ranges[1], ranges[2], \n               subset(dfs[i],\n               [:chr1, :chr2] => ByRow((cols...) -> all(cols .== chr)),\n               [:x1, :x2, :y1, :y2] =>\n               ByRow((cols...) -> !any(start .< cols .< stop))))\n    GeneticsMakie.plotloops!(axs[i], chr, ranges[1], ranges[2],\n               subset(dfs[i],\n               [:chr1, :chr2] => ByRow((cols...) -> all(cols .== chr)),\n               [:x1, :x2, :y1, :y2] =>\n               ByRow((cols...) -> any(start .< cols .< stop)));\n               colorarc = \"#CB3C33\", colorend = (\"#CB3C33\", 0.6))\n    rowsize!(f.layout, i, 40)\n    Label(f[i, 1, Top()], \"$(titles[i])\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\nend\nrs = GeneticsMakie.plotgenes!(axs[n + 1], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, n + 1, rs)\nGeneticsMakie.labelgenome(f[n + 1, 1, Bottom()], chr, ranges[1], ranges[2])\nLabel(f[1:n, 0], text = \"Chromatin\\ninteractions\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:(n + 1)\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"(Image: )","category":"page"},{"location":"examples/loops/","page":"Plotting loops","title":"Plotting loops","text":"As with the LocusZoom plots, by using Makie.jl's layout tools, it becomes easy to draw additional tracks. For example, in a separate track, we can include chromatin interactions present in other samples. In another example, we can include interactions found through other sequencing methods.","category":"page"},{"location":"examples/genes/#Plotting-genes","page":"Plotting genes","title":"Plotting genes","text":"","category":"section"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"After Parsing GENCODE, we can start plotting gene bodies.  GeneticsMakie.jl is transparent  in that it shows all genes within a genomic window.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CairoMakie\", \"DataFrames\", \"Arrow\"])\n\nusing GeneticsMakie, CairoMakie, DataFrames, Arrow\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\ngencode = Arrow.Table(\"data/gencode/$(splitext(basename(url))[1]).arrow\")|> DataFrame","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"We can focus on CACNA1G gene as an example. We can use GeneticsMakie.plotgenes!  to plot all genes within a given chromosome and ± 100 Kb window around gene start and stop sites.  We can then use GeneticsMakie.labelgenome to label the genomic range.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"isdir(\"figs\") || mkdir(\"figs\")\nset_theme!(font = \"Arial\")\n\ngene = \"CACNA1G\"\nchr, start, stop = GeneticsMakie.findgene(gene, gencode)\nf = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nranges = [start - 1e5, stop + 1e5]\nrs = GeneticsMakie.plotgenes!(ax, chr, ranges[1], ranges[2], gencode)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, ranges[1], ranges[2])\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"We can adjust the height of exons using the height keyword argument.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, ranges[1], ranges[2], gencode; height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, ranges[1], ranges[2])\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"We can change the color of genes and text using the genecolor and textcolor keyword arguments, respectively.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, ranges[1], ranges[2], gencode; height = 0.1, genecolor = :mediumorchid3, textcolor = :forestgreen)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, ranges[1], ranges[2])\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"Alternatively, we can visualize this locus by passing gene as a positional argument and  window as a keyword argument.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, gene, gencode; window = 1e5, height = 0.1, genecolor = :brown3)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, ranges[1], ranges[2])\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"There is no limit to the number of genes we can visualize. Below we visualize a larger  ± 2 Mb window around gene.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, gene, gencode; window = 2e6, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 2e6, stop + 2e6)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"note: Gene density\nAs some regions have higher gene density than the others, it would be wise (for publication purpose) to visualize a smaller genomic window for such gene-dense regions. One can instead visualize only the genes of interest (e.g. protein coding genes) by subsetting GENCODE accordingly to such features.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"We can highlight a gene or sets of genes as below. This can be useful when highlighting genes  by certain properties such as those that are protein coding or those that are  loss-of-function intolerant or those that are  significant in some sort of gene-level association. ","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start, (gene, :brown3), gencode; window = 1e5, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, start + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start, ([gene, \"EPN3\"], [:brown3, :forestgreen]), gencode; window = 1e5, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, start + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"Finally, we can make additional modifications on top of the figure as needed using Makie.jl.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start, gencode; window = 1e5, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, start + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nvlines!(ax, start, color = (:gold, 0.5), linewidth = 0.5)\nvlines!(ax, stop, color = (:gold, 0.5), linewidth = 0.5)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: )","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"Then we can save the figure as below.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"save(\"figs/$(gene)-gene.png\", f, px_per_unit = 4)","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [GeneticsMakie]","category":"page"},{"location":"api/#GeneticsMakie.findclosestgene-Tuple{AbstractString, Real, DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.findclosestgene","text":"findclosestgene(chr::AbstractString, bp::Real, gencode::DataFrame; start::Bool, proteincoding::Bool)\nfindclosestgene(df::DataFrame, gencode::DataFrame; start::Bool, proteincoding::Bool)\n\nFind the closest gene(s) to a genomic coordinate or a list of genomic coordinates using gencode. \n\nOptionally, the closest gene can be defined from the gene start site using start, and only protein coding genes can be considered using proteincoding.  The default start and proteincoding are false.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.findgene-Tuple{AbstractString, DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.findgene","text":"findgene(gene::AbstractString, gencode::DataFrame)\n\nFind chromosome, gene start, and gene stop sites for the gene of interest.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.findgwasloci-Tuple{DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.findgwasloci","text":"findgwasloci(gwas::DataFrame; p::Real)\nfindgwasloci(gwas::Vector{DataFrame}; p::Real)\n\nFind genome-wide significant loci for gwas that are separated from each other by at least 1 Mb.\n\nAlternatively, find genome-wide significant loci across multiple gwas that  are all separated by at least 1 Mb. p determines the genome-wide significance threshold,  which is 5e-8 by default.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.labelgenome-Tuple{GridLayoutBase.GridPosition, AbstractString, Real, Real}","page":"API","title":"GeneticsMakie.labelgenome","text":"labelgenome(g::GridPosition, chromosome::AbstractString, range1::Real, range2::Real)\n\nLabel g with a given chromosome and genomic range between range1 and range2.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.mungesumstats!-Tuple{Vector{DataFrames.DataFrame}}","page":"API","title":"GeneticsMakie.mungesumstats!","text":"mungesumstats!(gwas::DataFrame)\nmungesumstats!(gwas::Vector{DataFrame})\n\nMunge gwas by harmonizing the names of columns, their types, and P values, among others.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.parsegtf!-Tuple{DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.parsegtf!","text":"parsegtf!(gencode::DataFrame)\n\nParse gencode by extracting gene_id, gene_name, gene_type, transcript_id, transcript_support_level information from the info column.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotgenes!-Tuple{Makie.Axis, AbstractString, Real, Real, DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.plotgenes!","text":"plotgenes!(ax::Axis, chromosome::AbstractString, range1::Real, range2::Real, gencode::DataFrame; kwargs)\nplotgenes!(ax::Axis, chromosome::AbstractString, bp::Real, gencode::DataFrame; kwargs)\nplotgenes!(ax::Axis, gene::AbstractString, gencode::DataFrame; kwargs)\n\nPlot collapsed gene bodies for genes within a given chromosome and genomic range  between range1 and range2.\n\nAlternatively, plot within a given chromosome and a certain window around a  genomic coordinate bp or plot within a certain window around gene.\n\nArguments\n\nheight::Real = 0.25: the height of exons.\ngenecolor = :royalblue: the color of genes.\ntextcolor = :black: the color of gene labels.\nwindow::Real = 1e6: the window around bp or gene.                                       \n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotgenes!-Tuple{Makie.Axis, AbstractString, Real, Real, Tuple{AbstractVector, AbstractVector}, DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.plotgenes!","text":"plotgenes!(ax::Axis, chromosome::AbstractString, range1::Real, range2::Real, highlight::Tuple{AbstractVector, AbstractVector}, gencode::DataFrame; height::Real)\nplotgenes!(ax::Axis, chromosome::AbstractString, bp::Real, highlight::Tuple{AbstractVector, AbstractVector}, gencode::DataFrame; window::Real, height::Real)\nplotgenes!(ax::Axis, gene::AbstractString, highlight::Tuple{AbstractVector, AbstractVector}, gencode::DataFrame; window::Real, height::Real)\n\nPlot gene bodies with a vector of genes highlighted by a vector of colors via highlight.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotgwas!-Tuple{Makie.Axis, DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.plotgwas!","text":"plotgwas!(ax::Axis, gwas::DataFrame; ymax::Real, p::Real, sigline::Bool, sigcolor::Bool, build = 37)\n\nPlot gwas results as a Manhattan plot.\n\nArguments\n\nymax::Real: the maximum value for y axis.\np::Real = 5e-8: the genome-wide significance threshold.\nlinecolor = :red2: the color of genome-wide significance line, which can be turned off by setting to nothing.\nscattercolor = \"#4DB069\": the color of genome-wide significant variants, which can be turned off by setting to nothing.\nchromcolors = [\"#0D0D66\", \"#7592C8\"]: the colors of even and odd chromosomes. \nbuild::Int = 37: the human genome build. \n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotisoforms!-Tuple{Makie.Axis, AbstractString, DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.plotisoforms!","text":"plotisoforms!(ax::Axis, gene::AbstractString, gencode::DataFrame; kwargs)\n\nPlot each isoform of a given gene on a separate row.\n\nArguments\n\norderby::Union{Nothing, AbstractVector{<:AbstractString}} = nothing: the order of isoforms.\nhighlight::Union{Nothing, Tuple{AbstractVector, AbstractVector}} = nothing: isoforms to be highlighted and their colors.\nheight::Real = 0.25: the height of exons.\nisoformcolor = :royalblue: the color of isoforms.\ntextcolor = :black: the color of isoform labels.\ntext::Union{Bool, Symbol} = :top: the position of isoform labels. \n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotld!-Tuple","page":"API","title":"GeneticsMakie.plotld!","text":"plotld(LD::AbstractMatrix; kwargs)\nplotld!(ax::Axis, LD::AbstractMatrix; kwargs)\n\nHeatmap of symmetric correlation matrix LD with the diagonal elements on the x-axis.\n\nKeyword arguments\n\nthreshold   : threshold below which values are ignored (default to 1/9)\ncolormap    : colormap of values (default to cgrad(:Blues_9, 9, categorical = true))\ncolorrange  : start and end points of colormap (default to (0, 1))\nstrokewidth : width of outline around heatmap boxes (default to 0)\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotld-Tuple","page":"API","title":"GeneticsMakie.plotld","text":"plotld(LD::AbstractMatrix; kwargs)\nplotld!(ax::Axis, LD::AbstractMatrix; kwargs)\n\nHeatmap of symmetric correlation matrix LD with the diagonal elements on the x-axis.\n\nKeyword arguments\n\nthreshold   : threshold below which values are ignored (default to 1/9)\ncolormap    : colormap of values (default to cgrad(:Blues_9, 9, categorical = true))\ncolorrange  : start and end points of colormap (default to (0, 1))\nstrokewidth : width of outline around heatmap boxes (default to 0)\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotlocus!-Tuple{Makie.Axis, AbstractString, Real, Real, DataFrames.DataFrame}","page":"API","title":"GeneticsMakie.plotlocus!","text":"plotlocus!(ax::Axis, chromosome::AbstractString, range1::Real, range2::Real, gwas::DataFrame; kwargs)\nplotlocus!(ax::Axis, chromosome::AbstractString, bp::Real, gwas::DataFrame; kwargs)\nplotlocus!(ax::Axis, gene::AbstractString, gwas::DataFrame, gencode::DataFrame; kwargs)\n\nPlot gwas results within a given chromosome and genomic range between range1  and range2.\n\nAlternatively, plot within a given chromosome and a certain window around a  genomic coordinate bp or plot within a certain window around gene.\n\nArguments\n\nld::Union{Nothing, SnpData, Tuple{SnpData, Union{AbstractString, Tuple{AbstractString, Int}}}} = nothing:    the reference panel for which LD is calculated.\nymax::Real: the maximum value for y axis. \nwindow::Real = 1e6: the window around bp or gene. \n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotloops!-Tuple{Makie.Axis, AbstractString, Real, Real, DataFrames.AbstractDataFrame}","page":"API","title":"GeneticsMakie.plotloops!","text":"plotloops!(ax::Axis, chromosome::AbstractString, range1::Real, range2::Real, loopdf::DataFrame; kwargs)\nplotloops!(ax::Axis, chromosome::AbstractString, bp::Real, loopdf::DataFrame; kwargs)\nplotloops!(ax::Axis, gene::AbstractString, loopdf::DataFrame, gencode::DataFrame; kwargs)\n\nPlot loops present in loopdf within a given chromosome and genomic range between range1  and range2.\n\nAlternatively, plot within a given chromosome and a certain window around a  genomic coordinate bp or plot within a certain window around gene.\n\nArguments\n\nymax::Real = 102: the maximum value for y axis.\nlinewidth = 0.25: the line width of the loops' arcs.\ncolorarc = \"#9658B2\": the color of loops' arcs.\ncolorend = (\"#FFBB00\", 0.5): the color of loops' ends.\nresolution = 1000: plot resolution points along x-axis within the given range.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotqq!-Tuple{Makie.Axis, AbstractVector}","page":"API","title":"GeneticsMakie.plotqq!","text":"plotqq!(ax::Axis, gwas::DataFrame; kwargs)\nplotqq!(ax::Axis, P::AbstractVector; kwargs)\n\nPlot QQ plot of P values where the expected distribution is the uniform distribution.\n\nKeyword arguments include xstep::Real and ystep::Real for x and y axes ticks step sizes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotrg!-Tuple","page":"API","title":"GeneticsMakie.plotrg!","text":"plotrg(r::AbstractMatrix; kwargs)\nplotrg!(ax::Axis, r::AbstractMatrix; kwargs)\n\nCorrelation plot of matrix r.\n\nKeyword arguments\n\ncircle      : whether to draw cicles instead of rectangles (default to true)\ndiagonal    : whether to visualize diagonal elements (default to false)\ncolormap    : colormap of values (default to :RdBu_10)\ncolorrange  : start and end points of colormap (default to (-1, 1))\nstrokewidth : width of outline around surrounding boxes (default to 0.5)\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneticsMakie.plotrg-Tuple","page":"API","title":"GeneticsMakie.plotrg","text":"plotrg(r::AbstractMatrix; kwargs)\nplotrg!(ax::Axis, r::AbstractMatrix; kwargs)\n\nCorrelation plot of matrix r.\n\nKeyword arguments\n\ncircle      : whether to draw cicles instead of rectangles (default to true)\ndiagonal    : whether to visualize diagonal elements (default to false)\ncolormap    : colormap of values (default to :RdBu_10)\ncolorrange  : start and end points of colormap (default to (-1, 1))\nstrokewidth : width of outline around surrounding boxes (default to 0.5)\n\n\n\n\n\n","category":"method"},{"location":"examples/twas/#Plotting-TWAS","page":"Plotting TWAS","title":"Plotting TWAS","text":"","category":"section"},{"location":"examples/twas/","page":"Plotting TWAS","title":"Plotting TWAS","text":"One can also visualize gene-level association results using GeneticsMakie.plotgwas!. Here we focus on the results of meta analysis of gene-level burden test from case and control studies and gene-level Poisson test from family trio studies for schizophrenia.","category":"page"},{"location":"examples/twas/","page":"Plotting TWAS","title":"Plotting TWAS","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CairoMakie\", \"CSV\", \"DataFrames\", \"Arrow\"])","category":"page"},{"location":"examples/twas/","page":"Plotting TWAS","title":"Plotting TWAS","text":"using GeneticsMakie, CairoMakie, CSV, DataFrames, Arrow, Downloads\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\ngencode = Arrow.Table(\"data/gencode/$(splitext(basename(url))[1]).arrow\")|> DataFrame\nDownloads.download(\"https://atgu-exome-browser-data.s3.amazonaws.com/SCHEMA/SCHEMA_gene_results.tsv.bgz\", \"data/gwas/SCHEMA_gene_results.tsv.bgz\")\ndf = CSV.read(\"data/gwas/SCHEMA_gene_results.tsv.bgz\", DataFrame)","category":"page"},{"location":"examples/twas/","page":"Plotting TWAS","title":"Plotting TWAS","text":"The key is to calculate coordinates for each gene in the summary statistics.","category":"page"},{"location":"examples/twas/","page":"Plotting TWAS","title":"Plotting TWAS","text":"df.CHR .= \"1\"\ndf.BP .= -1.5\nstorage = filter(x -> x.feature == \"gene\", gencode)\nfor i in 1:nrow(df)\n    ind = findfirst(isequal(df.gene_id[i]), storage.gene_id)\n    isnothing(ind) ? continue : nothing\n    df.CHR[i] = storage.seqnames[ind]\n    df.BP[i] = (storage.start[ind] + storage.end[ind]) / 2\nend\nrename!(df, \"P meta\" => \"P\")\ndropmissing!(df, :P)\nfilter!(x -> x.P != \"NA\", df)\ndf.P = parse.(Float64, df.P)","category":"page"},{"location":"examples/twas/","page":"Plotting TWAS","title":"Plotting TWAS","text":"f = Figure(resolution = (408, 792))\nax = Axis(f[1, 1])\nGeneticsMakie.plotgwas!(ax, df; ymax = 13, p = 2.2e-6)\nhidespines!(ax, :t, :r)\nLabel(f[1, 1, Top()], text = \"SCZ (2022): SCHEMA\", fontsize = 8)\nrowsize!(f.layout, 1, 50)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/twas/","page":"Plotting TWAS","title":"Plotting TWAS","text":"(Image: )","category":"page"},{"location":"examples/summary/#Munging-summary-statistics","page":"Munging summary statistics","title":"Munging summary statistics","text":"","category":"section"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"GWAS summary statistics come in a variety of shapes and flavors, so harmonizing them is crucial in making our lives easier when trying to visualize their results. We can  take a peak at GWAS results for height and weight, the two classic anthropometric traits. ","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CSV\", \"DataFrames\", \"Arrow\"])","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"using GeneticsMakie, CSV, DataFrames, Arrow, Downloads\ngwas = Dict(\n    \"height\" => \"https://portals.broadinstitute.org/collaboration/giant/images/6/63/Meta-analysis_Wood_et_al%2BUKBiobank_2018.txt.gz\",\n    \"weight\" => \"https://portals.broadinstitute.org/collaboration/giant/images/c/c8/Meta-analysis_Locke_et_al%2BUKBiobank_2018_UPDATED.txt.gz\"\n)\nisdir(\"data/gwas\") || mkdir(\"data/gwas\")\ndfs = DataFrame[]\nfor key in keys(gwas)\n    url = gwas[key]\n    isfile(\"data/gwas/$(basename(url))\") || Downloads.download(url, \"data/gwas/$(basename(url))\")\n    push!(dfs, CSV.read(\"data/gwas/$(basename(url))\", DataFrame; comment = \"##\", missingstring = [\"NA\"]))\nend","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"To harmonize summary statistics, we run a single command GeneticsMakie.mungesumstats!.  For all downstream plotting functions, we note that GWAS summary statistics should be pre-harmonized.","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"GeneticsMakie.mungesumstats!(dfs)","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"To find GWAS loci for each phenotype that are separated by at least 1 Mb,  we can execute the following command.","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"GeneticsMakie.findgwasloci(dfs[1])\nGeneticsMakie.findgwasloci(dfs[2])","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"To find every GWAS loci across multiple phenotypes that are separated by at least 1 Mb, we can instead run the following command.","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"GeneticsMakie.findgwasloci(dfs)","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"Such an exhaustive list of loci can then be iterated through and visualized by  Plotting LocusZooom.","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"We can also find the closest gene to each index SNP in GWAS loci after Parsing GENCODE.","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"file = \"gencode.v39lift37.annotation.gtf.arrow\"\ngencode = Arrow.Table(\"data/gencode/$(file)\")|> DataFrame\n\nloci = GeneticsMakie.findgwasloci(dfs[1])\nGeneticsMakie.findclosestgene(loci, gencode)\nGeneticsMakie.findclosestgene(loci, gencode; start = true) # closest gene from gene start site\nGeneticsMakie.findclosestgene(loci, gencode; proteincoding = true) # closest \"protein-coding\" gene","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"To reduce memory intake, we can store and load GWAS summary statistics as Arrow files. ","category":"page"},{"location":"examples/summary/","page":"Munging summary statistics","title":"Munging summary statistics","text":"for (i, key) in enumerate(keys(gwas))\n    Arrow.write(\"data/gwas/$(key).arrow\", dfs[i])\nend","category":"page"},{"location":"examples/peaks/#Plotting-peaks","page":"Plotting peaks","title":"Plotting peaks","text":"","category":"section"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"Epigenetic sequencing is another data modality of interest that we can visualize with Makie.jl and GeneticsMakie.jl. ChIP-seq and ATAC-seq map epigenetic modifications throughout the genome by identifying DNA-protein interaction sites and open chromatin respectively, and although they capture different aspects of the epigenome, their resulting data share the same form and function (i.e. BAM files to capture reads, wiggle files to capture coverage and signal, BED files to capture peaks). Consequently, visualizing both types of data will follow the same workflow.","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"We will start with the annotation from Parsing GENCODE. Accompanying ChIP-seq data will be downloaded from the ENCODE project.","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CairoMakie\", \"CSV\", \"DataFrames\", \"Arrow\", \"BigWig\"])","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"using GeneticsMakie, CairoMakie, CSV, DataFrames, Arrow, Downloads, BigWig\nchipseq = Dict(\n    \"continuous\" => \"https://www.encodeproject.org/files/ENCFF343VSH/@@download/ENCFF343VSH.bigWig\",\n    \"peaks\" => \"https://www.encodeproject.org/files/ENCFF938RRM/@@download/ENCFF938RRM.bed.gz\"\n)\nisdir(\"data/chipseq\") || mkdir(\"data/chipseq\")\nfor key in keys(chipseq)\n    url = chipseq[key]\n    isfile(\"data/chipseq/$(basename(url))\") || Downloads.download(url, \"data/chipseq/$(basename(url))\")\nend\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\ngencode = Arrow.Table(\"data/gencode/$(splitext(basename(url))[1]).arrow\")|> DataFrame","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"We can generate a track visualizing ChIP-seq data continuously over a locus. Here we plot the the p-value from processing the ChiP-seq data through MACS2 for rejecting the null hypothesis that the signal at that site is also present in the control. Continuous data like this is often stored in bigWig files, which store dense, continuous data in indexed binary files. Other types of continuous data can be stored and delivered through this format; BAM files can be converted to the bigWig format in order to convey read coverage over the genome. We will use the BigWig.jl package to read in this data to plot.","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"gene = \"KMT2E\"\nchr, start, stop = GeneticsMakie.findgene(gene, gencode)\nranges = [start - 1e6, stop + 1e6]\n\nf = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:2]\n# Generate continuous plot of signal p-values\nlet\n    ax = axs[1]\n    reader = open(BigWig.Reader, \"data/chipseq/$(basename(chipseq[\"continuous\"]))\")\n    xs = Float64[]\n    ys = Float64[]\n    for record in BigWig.GenomicFeatures.eachoverlap(reader,\n        BigWig.Interval(\"chr$(chr)\", Int64(ranges[1]), Int64(ranges[2])))\n        # Extract position\n        push!(xs, BigWig.chromstart(record))\n        # Extract -log₁₀(p)\n        push!(ys, BigWig.value(record))\n    end\n    band!(ax, xs, fill(0, length(xs)), ys; color = (\"#389826\", 0.75))\n    lines!(ax, xs, ys; color = (\"#389826\", 0.75))\n    rowsize!(f.layout, 1, 30)\n    close(reader)\n    Label(f[1, 1, Top()], \"H3K4me3\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\n    # Tidy up the axes\n    ymax = max(10, maximum(ys) * 1.25)\n    ax.spinewidth = 0.75\n    ax.ytickwidth = 0.75\n    ax.ylabelsize = 6\n    ax.yticklabelsize = 6\n    ax.yticksize = 3\n    if ymax == 10\n        ax.yticks = 0:3:10\n    elseif 10 < ymax <= 20\n        ax.yticks = 0:5:ymax\n    elseif 20 < ymax <= 50\n        ax.yticks =  0:10:ymax\n    else\n        s = div(ymax, 4)\n        d, r = divrem(s, 10)\n        if r < 5 \n            ax.yticks = (0:10d:ymax)\n        else\n            ax.yticks = (0:((d + 1) * 10):ymax)\n        end\n    end\n    xlims!(ax, ranges[1], ranges[2])\n    ylims!(ax, 0, ymax)\n    hidespines!(ax, :t, :r)\n    hidexdecorations!(ax)\n    hideydecorations!(ax, ticks = false, label = false, ticklabels = false)\nend\n# Plot genes and adjust formatting\nrs = GeneticsMakie.plotgenes!(axs[2], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, 2, rs)\nGeneticsMakie.labelgenome(f[2, 1, Bottom()], chr, ranges[1], ranges[2])\nLabel(f[1, 0], text = \"-log[p]\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:2\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"(Image: )","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"An alternative way to visualize ChIP-seq data is by drawing the peaks only. There are various tools for calling peaks, and for the most part they output the peaks in a BED file or a similar format. Here we load in and draw peaks called by MACS2.","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"using Makie.GeometryBasics\nf = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:2]\n# Generate plot of peaks\nlet\n    ax = axs[1]\n    narrowpeak_header =\n    [:chrom, :start, :stop, :name, :score, :strand,\n     :signalvalue, :nlog₁₀pvalue, :nlog₁₀qvalue, :peak]\n    df = CSV.read(\"data/chipseq/$(basename(chipseq[\"peaks\"]))\", DataFrame;\n                  header = narrowpeak_header)\n    subset!(df,\n            :chrom => col -> col .== \"chr$(chr)\",\n            [:start, :stop] =>\n            (start, stop) ->\n            (start .< ranges[2]) .&& (stop .> ranges[1]))\n    for row in eachrow(df)\n        peakpoly = Polygon(Point2f[(row.start, 0),\n                                   (row.start, 10),\n                                   (row.stop, 10),\n                                   (row.stop, 0)])\n        poly!(ax, peakpoly; color = \"#CB3C33\")\n    end\n    ax.spinewidth = 0.75\n    hidexdecorations!(ax)\n    hideydecorations!(ax)\n    xlims!(ax, ranges[1], ranges[2])\n    ylims!(ax, -10 * .25, 10 * 1.5)\n    hidespines!(ax, :t, :r)\n    rowsize!(f.layout, 1, 10)\nend\n# Plot genes and adjust formatting\nrs = GeneticsMakie.plotgenes!(axs[2], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, 2, rs)\nGeneticsMakie.labelgenome(f[2, 1, Bottom()], chr, ranges[1], ranges[2])\nLabel(f[1, 0], text = \"Peaks\", fontsize = 6, rotation = pi / 2)\nLabel(f[0, 2], \"H3K4me3\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0), tellwidth = false)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:2\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"(Image: )","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"Using Makie.jl's layout tools, we can visualize both the continuous track and the called peaks simultaneously.","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"f = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:3]\n# Generate continuous plot of signal p-values\nlet\n    ax = axs[1]\n    reader = open(BigWig.Reader, \"data/chipseq/$(basename(chipseq[\"continuous\"]))\")\n    xs = Float64[]\n    ys = Float64[]\n    for record in BigWig.GenomicFeatures.eachoverlap(reader,\n        BigWig.Interval(\"chr$(chr)\", Int64(ranges[1]), Int64(ranges[2])))\n        # Extract position\n        push!(xs, BigWig.chromstart(record))\n        # Extract -log₁₀(p)\n        push!(ys, BigWig.value(record))\n    end\n    band!(ax, xs, fill(0, length(xs)), ys; color = (\"#389826\", 0.75))\n    lines!(ax, xs, ys; color = (\"#389826\", 0.75))\n    rowsize!(f.layout, 1, 30)\n    close(reader)\n    Label(f[1, 1, Top()], \"H3K4me3\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\n    # Tidy up the axes\n    ymax = max(10, maximum(ys) * 1.25)\n    ax.spinewidth = 0.75\n    ax.ytickwidth = 0.75\n    ax.ylabelsize = 6\n    ax.yticklabelsize = 6\n    ax.yticksize = 3\n    if ymax == 10\n        ax.yticks = 0:3:10\n    elseif 10 < ymax <= 20\n        ax.yticks = 0:5:ymax\n    elseif 20 < ymax <= 50\n        ax.yticks =  0:10:ymax\n    else\n        s = div(ymax, 4)\n        d, r = divrem(s, 10)\n        if r < 5 \n            ax.yticks = (0:10d:ymax)\n        else\n            ax.yticks = (0:((d + 1) * 10):ymax)\n        end\n    end\n    xlims!(ax, ranges[1], ranges[2])\n    ylims!(ax, 0, ymax)\n    hidespines!(ax, :t, :r)\n    hidexdecorations!(ax)\n    hideydecorations!(ax, ticks = false, label = false, ticklabels = false)\nend\n# Generate plot of peaks\nlet\n    ax = axs[2]\n    narrowpeak_header =\n    [:chrom, :start, :stop, :name, :score, :strand,\n     :signalvalue, :nlog₁₀pvalue, :nlog₁₀qvalue, :peak]\n    df = CSV.read(\"data/chipseq/$(basename(chipseq[\"peaks\"]))\", DataFrame;\n                  header = narrowpeak_header)\n    subset!(df,\n            :chrom => col -> col .== \"chr$(chr)\",\n            [:start, :stop] =>\n            (start, stop) ->\n            (start .< ranges[2]) .&& (stop .> ranges[1]))\n    for row in eachrow(df)\n        peakpoly = Polygon(Point2f[(row.start, 0),\n                                   (row.start, 10),\n                                   (row.stop, 10),\n                                   (row.stop, 0)])\n        poly!(ax, peakpoly; color = \"#CB3C33\")\n    end\n    ax.spinewidth = 0.75\n    hidexdecorations!(ax)\n    hideydecorations!(ax)\n    xlims!(ax, ranges[1], ranges[2])\n    ylims!(ax, -10 * .25, 10 * 1.5)\n    hidespines!(ax, :t, :r)\n    rowsize!(f.layout, 2, 10)\nend\n# Plot genes and adjust formatting\nrs = GeneticsMakie.plotgenes!(axs[3], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, 3, rs)\nGeneticsMakie.labelgenome(f[3, 1, Bottom()], chr, ranges[1], ranges[2])\nLabel(f[1, 0], text = \"-log[p]\", fontsize = 6, rotation = pi / 2)\nLabel(f[2, 1], text = \"Peaks\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:3\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/peaks/","page":"Plotting peaks","title":"Plotting peaks","text":"(Image: )","category":"page"},{"location":"examples/locus/#Plotting-LocusZooom","page":"Plotting LocusZoom","title":"Plotting LocusZooom","text":"","category":"section"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"After Parsing GENCODE and Munging summary statistics, we can now put the pieces together to draw the backbone of a LocusZoom plot.  We focus on ACAN locus as an example, which reaches strong genome-wide significance in GWAS for height. By default, GeneticsMakie.plotlocus! returns a straightforward scatter plot.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CairoMakie\", \"DataFrames\", \"Arrow\", \"SnpArrays\"])","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"using GeneticsMakie, CairoMakie, DataFrames, Arrow, SnpArrays, Downloads\ndfs = DataFrame[]\nfor key in [\"height\", \"weight\"]\n    push!(dfs, Arrow.Table(\"data/gwas/$(key).arrow\")|> DataFrame)\nend\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\ngencode = Arrow.Table(\"data/gencode/$(splitext(basename(url))[1]).arrow\")|> DataFrame\nGeneticsMakie.findclosestgene(GeneticsMakie.findgwasloci(dfs[1]), gencode)","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"gene = \"ACAN\"\nchr, start, stop = GeneticsMakie.findgene(gene, gencode)\nranges = [start - 1e6, stop + 1e6]\n\nn = length(dfs)\ntitles = [\"Height (Yengo et al. 2018)\", \"Weight (Yengo et al. 2018)\"]\nf = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:(n + 1)]\nfor i in 1:n\n    GeneticsMakie.plotlocus!(axs[i], chr, ranges[1], ranges[2], dfs[i])\n    rowsize!(f.layout, i, 30)\n    lines!(axs[i], ranges, fill(-log(10, 5e-8), 2), color = (:purple, 0.5), linewidth = 0.5)\n    Label(f[i, 1, Top()], \"$(titles[i])\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\nend\nrs = GeneticsMakie.plotgenes!(axs[n + 1], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, n + 1, rs)\nGeneticsMakie.labelgenome(f[n + 1, 1, Bottom()], chr, ranges[1], ranges[2])\nColorbar(f[1:n, 2], limits = (0, 1), ticks = 0:1:1, height = 20,\n    colormap = [:gray60, :red2], label = \"LD\", ticksize = 0, tickwidth = 0,\n    tickalign = 0, ticklabelsize = 6, flip_vertical_label = true,\n    labelsize = 6, width = 5, spinewidth = 0.5)\nLabel(f[1:n, 0], text = \"-log[p]\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:(n + 1)\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"(Image: )","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"To color variants by linkage disequilibrium (LD), we need a reference panel. If we already have one, we can use SnpArrays.jl to read in PLINK bed files. Otherwise, we download and load pre-processed 1000 Genomes reference panel for chromosome 15.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"isdir(\"data/1kg\") || mkdir(\"data/1kg\")\nfor plink in [\"bed\", \"bim\", \"fam\"]\n    Downloads.download(\"https://github.com/mmkim1210/GeneticsMakieExamples/raw/master/data/kgp.chr15.$(plink)\", \"data/1kg/kgp.chr15.$(plink)\")\nend\nkgp = SnpData(\"data/1kg/kgp.chr15\")","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"note: Processing LD reference panel\n1000 Genomes genotype array data is publicly available, which can be downloaded and processed using these example scripts.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"We can then color variants by LD with the index/sentinel SNP by using the ld keyword argument.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"f = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:(n + 1)]\nfor i in 1:n\n    GeneticsMakie.plotlocus!(axs[i], chr, ranges[1], ranges[2], dfs[i]; ld = kgp)\n    rowsize!(f.layout, i, 30)\n    lines!(axs[i], ranges, fill(-log(10, 5e-8), 2), color = (:purple, 0.5), linewidth = 0.5)\n    Label(f[i, 1, Top()], \"$(titles[i])\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\nend\nrs = GeneticsMakie.plotgenes!(axs[n + 1], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, n + 1, rs)\nGeneticsMakie.labelgenome(f[n + 1, 1, Bottom()], chr, ranges[1], ranges[2])\nColorbar(f[1:n, 2], limits = (0, 1), ticks = 0:1:1, height = 20,\n    colormap = [:gray60, :red2], label = \"LD\", ticksize = 0, tickwidth = 0,\n    tickalign = 0, ticklabelsize = 6, flip_vertical_label = true,\n    labelsize = 6, width = 5, spinewidth = 0.5)\nLabel(f[1:n, 0], text = \"-log[p]\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:(n + 1)\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"(Image: )","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"We can also color variants by LD with the same SNP by using the ld keyword argument.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"f = Figure(resolution = (306, 792))\naxs = [Axis(f[i, 1]) for i in 1:(n + 1)]\nfor i in 1:n\n    GeneticsMakie.plotlocus!(axs[i], chr, ranges[1], ranges[2], dfs[i]; ld = (kgp, (\"15\", 89395626)))\n    rowsize!(f.layout, i, 30)\n    lines!(axs[i], ranges, fill(-log(10, 5e-8), 2), color = (:purple, 0.5), linewidth = 0.5)\n    Label(f[i, 1, Top()], \"$(titles[i])\", fontsize = 6, halign = :left, padding = (7.5, 0, -5, 0))\nend\nrs = GeneticsMakie.plotgenes!(axs[n + 1], chr, ranges[1], ranges[2], gencode; height = 0.1)\nrowsize!(f.layout, n + 1, rs)\nGeneticsMakie.labelgenome(f[n + 1, 1, Bottom()], chr, ranges[1], ranges[2])\nColorbar(f[1:n, 2], limits = (0, 1), ticks = 0:1:1, height = 20,\n    colormap = [:gray60, :red2], label = \"LD\", ticksize = 0, tickwidth = 0,\n    tickalign = 0, ticklabelsize = 6, flip_vertical_label = true,\n    labelsize = 6, width = 5, spinewidth = 0.5)\nLabel(f[1:n, 0], text = \"-log[p]\", fontsize = 6, rotation = pi / 2)\nrowgap!(f.layout, 5)\ncolgap!(f.layout, 5)\nfor i in 1:(n + 1)\n    vlines!(axs[i], start, color = (:gold, 0.5), linewidth = 0.5)\n    vlines!(axs[i], stop, color = (:gold, 0.5), linewidth = 0.5)\nend\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"(Image: )","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"By using Makie.jl's layout tools,  it becomes easy to draw additional tracks. For example, in a separate track,  the variants could be colored or could have varying sizes depending on their minor allele frequency.  In another example, the variants could be colored based on their inclusion in a  credible set post-fine-mapping.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"note: Plotting the intersection of SNPs, not the union\nGeneticsMakie.plotlocus! plots only the variants that are present in the reference panel,  when the ld keyword argument is specified. Although SNPs that are missing in the reference panel could be plotted differently (e.g. with varying transparency and shape), GeneticsMakie.jl is designed to visualize 100s of phenotypes simultaneously in which case such discrepancy is hard to tell and  is confusing. Hence, for more direct comparison of loci across phenotypes,  only the variants that are found in the reference panel are shown.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"warning: Extremely small P values\nThere are several GWAS loci that harbor extremely small P values, in which cases the P values will be clamped to the smallest floating point number. Such cases are going to be more common in phenotypes that are reaching saturation in terms of GWAS discovery (e.g. height). In those cases, it is more commonplace to observe allelic heterogneity, and it might be more appropriate to plot alternative measures of strength of association (e.g. Z scores).","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"note: Patterns of LD\nOftentimes, chunks of LD blocks hug a single or multiple gene boundaries.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"tip: Covering the entire genome\nVisualizing 1,500 genomic regions with 2 Mb window will more or less cover the entire human genome. Note that empirically speaking, the probability of an arbitrary 2 Mb window  harboring at least one genome-wide significant hit across multiple phenotypes is  higher than not harboring any significant association.","category":"page"},{"location":"examples/locus/","page":"Plotting LocusZoom","title":"Plotting LocusZoom","text":"note: Phenome-scale LocusZoom\nTo visualize 100s of phenotypes simultaneously, summary statistics or other relevant genomic annotations should be converted to memory friendly  Arrow.jl or  Parquet.jl files.","category":"page"},{"location":"examples/gtf/#Parsing-GENCODE","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"","category":"section"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"Install the relevant packages in the usual way.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CSV\", \"DataFrames\", \"Arrow\"])","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"To plot genes and isoforms, we need a transcriptome annotation. We can use  the latest GENCODE annotation for  the human genome (GRCh37), where we download the comprehensive  gene annotation file in GTF format. We recommend having at least 16 GB RAM available for loading GENCODE annotation.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"using GeneticsMakie, CSV, DataFrames, Arrow, Downloads\nisdir(\"data\") || mkdir(\"data\")\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\nfile = basename(url)\nisdir(\"data/gencode\") || mkdir(\"data/gencode\")\nisfile(\"data/gencode/$(file)\") || Downloads.download(url, \"data/gencode/$(file)\")\nh = [\"seqnames\", \"source\", \"feature\", \"start\", \"end\", \"score\", \"strand\", \"phase\", \"info\"]\ngencode = CSV.read(\"data/gencode/$(file)\", DataFrame; delim = \"\\t\", comment = \"#\", header = h)","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"warning: Human genome build\nThe latest human genome assembly is GRCh38, but we use an annotation with coordinates  from the older version (GRCh37), because a lot of the GWAS results are shared in  GRCh37 genomic coordinates. Make sure to use the matching human genome build when visualizing your results. ","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"The ninth column of a GTF file  contains rich information about features, so we can parse this column.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"GeneticsMakie.parsegtf!(gencode)","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"info: Chromosome names\nChromosome names are munged to not contain “chr” prefix, and their type is String, since there could be non-numerical chromosome names, such as sex chromosomes and mitochondrial genome.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"To reduce memory intake, we can also subset gencode to most commonly used columns in downstream analyses.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"select!(gencode, :seqnames, :feature, :start, :end, :strand, :gene_id, :gene_name, :gene_type, :transcript_id)","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"To further reduce memory intake, we can instead store and load GENCODE annotation as an Arrow file. ","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"Arrow.write(\"data/gencode/$(splitext(file)[1]).arrow\", gencode)\ngencode = Arrow.Table(\"data/gencode/$(splitext(file)[1]).arrow\")|> DataFrame","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"Other transcriptome annotations, such as one from RefSeq, can be used for plotting functions  as long as they contain the above columns with the right column names.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"Once gencode is ready, we can look up where a gene is on the human genome.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"GeneticsMakie.findgene(\"RBFOX1\", gencode)\nGeneticsMakie.findgene(\"ENSG00000078328\", gencode)","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"tip: Gene names\nMake sure to use the correct gene name in case the gene cannot be found. The latest gene names can be looked up in databases such as GeneCards.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeneticsMakie","category":"page"},{"location":"#GeneticsMakie","page":"Home","title":"GeneticsMakie","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The goal of GeneticsMakie.jl is to  permit seamless data visualization and exploratory data analysis of the human genome within the larger Julia data science and OpenMendel ecosystems. The package provides convenient wrapper functions for wrangling genetic association results and  plotting them using Makie.jl. Every component of a figure  can be easily customized and extended, and the package generates high-quality, publication-ready figures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: \"mhc\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Getting started\nPlease peruse the documentations of  Makie.jl,  CSV.jl,  DataFrames.jl,  and SnpArrays.jl.  Familiarity with these packages will allow visualization of most types of genetic and genomic data.  Makie.jl's default layout tools are particularly useful for  plotting different genetic and genomic data modalities as separate layers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: An usage case\nIf you have run a genome-wide association study (GWAS) at the variant-level,  and you would like to eyeball genome-wide significant loci across hundreds of phenotypes, then you are in the right place.","category":"page"}]
}
