var documenterSearchIndex = {"docs":
[{"location":"examples/genes/#Plotting-genes","page":"Plotting genes","title":"Plotting genes","text":"","category":"section"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"After Parsing GENCODE, we can start plotting gene bodies.  GeneticsMakie.jl is transparent  in that it shows all genes within a genomic window.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"using Pkg\nPkg.add(\"CairoMakie\")","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"using CairoMakie\nisdir(\"figs\") || mkdir(\"figs\")\nset_theme!(font = \"Arial\")\n\ngene = \"CACNA1G\"\nchr, start, stop = GeneticsMakie.findgene(gene, gencode)\nf = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start - 1e5, stop + 1e5, gencode)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, stop + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\") Here, GeneticsMakie.plotgenes! plots all genes within a given chr and ± 100 Kb window around gene start and stop sites. GeneticsMakie.labelgenome then labels the genomic range.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start - 1e5, stop + 1e5, gencode; height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, stop + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\") We can adjust the height of exons using the height keyword argument.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start - 1e5, stop + 1e5, gencode; height = 0.1, genecolor = :mediumorchid3, textcolor = :forestgreen)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, stop + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\") We can change the color of genes and text using the genecolor and textcolor keyword arguments, respectively.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, gene, gencode; window = 1e5, height = 0.1, genecolor = :brown3)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, stop + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\") Alternatively, we can visualize this locus by passing gene as a positional argument and  window as a keyword argument.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, gene, gencode; window = 2e6, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 2e6, stop + 2e6)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\") There is no limit to the number of genes we can visualize. Here, we visualize a larger  ± 2 Mb window around gene.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"note: Gene density\nAs some regions have higher gene density than the others, it would be wise (for publication purpose) to visualize a smaller genomic window for such gene-dense regions.","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start, (gene, :brown3), gencode; window = 1e5, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, start + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\")","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start, ([gene, \"EPN3\"], [:brown3, :forestgreen]), gencode; window = 1e5, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, start + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\") We can highlight a gene or sets of genes as above. This can be useful when highlighting genes  by certain characteristics such as those that are protein coding and those that are  loss-of-function intolerant. ","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"f = Figure(resolution = (306, 792))\nax = Axis(f[1, 1])\nrs = GeneticsMakie.plotgenes!(ax, chr, start, gencode; window = 1e5, height = 0.1)\nGeneticsMakie.labelgenome(f[1, 1, Bottom()], chr, start - 1e5, start + 1e5)\nrowsize!(f.layout, 1, rs)\nresize_to_layout!(f)\nvlines!(ax, start, color = (:gold, 0.5), linewidth = 0.5)\nvlines!(ax, stop, color = (:gold, 0.5), linewidth = 0.5)\nf","category":"page"},{"location":"examples/genes/","page":"Plotting genes","title":"Plotting genes","text":"(Image: \"cacna1g\") Finally, we can make additional modifications on top of the figure as needed using Makie.jl.","category":"page"},{"location":"examples/gtf/#Parsing-GENCODE","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"","category":"section"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"Install the relevant packages in the usual way.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"using Pkg\nPkg.add([\"GeneticsMakie\", \"CSV\", \"DataFrames\"])","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"To plot genes and isoforms, we need a transcriptome annotation. We can use  the latest GENCODE annotation for  the human genome (GRCh37), where we download the comprehensive  gene annotation file in GTF format.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"using GeneticsMakie, CSV, DataFrames\nisdir(\"data\") || mkdir(\"data\")\nurl = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh37_mapping/gencode.v39lift37.annotation.gtf.gz\"\nfile = basename(url)\nisdir(\"data/gencode\") || mkdir(\"data/gencode\")\nisfile(\"data/gencode/$(file)\") || download(url, \"data/gencode/$(file)\")\nh = [\"seqnames\", \"source\", \"feature\", \"start\", \"end\", \"score\", \"strand\", \"phase\", \"info\"]\ngencode = CSV.read(\"data/gencode/$(file)\", DataFrame; delim = \"\\t\", comment = \"#\", header = h)","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"warning: Human genome build\nThe latest human genome assembly is GRCh38, but we use an annotation with coordinates  from the older version (GRCh37), because a lot of the GWAS results are shared in  GRCh37 genomic coordinates. Make sure to use the matching human genome build when visualizing your results. ","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"The ninth column of a GTF file  contains rich information about features, so we can parse this column.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"GeneticsMakie.parsegtf!(gencode)","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"info: Chromosome names\nChromosome names are munged to not contain “chr” prefix, and their type is String, since there could be non-numerical chromosome names, such as sex chromosomes and mitochondrial genome.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"To reduce memory intake, we can also subset gencode to most commonly used columns in downstream analyses.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"select!(gencode, :seqnames, :feature, :start, :end, :strand, :gene_name, :gene_type, :transcript_id)","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"Other transcriptome annotations, such as one from RefSeq, can be used for plotting functions  as long as they contain the above columns with the right column names.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"Once gencode is ready, we can look up where the gene is on the human genome.","category":"page"},{"location":"examples/gtf/","page":"Parsing GENCODE","title":"Parsing GENCODE","text":"GeneticsMakie.findgene(\"RBFOX1\", gencode)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeneticsMakie","category":"page"},{"location":"#GeneticsMakie","page":"Home","title":"GeneticsMakie","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The goal of GeneticsMakie.jl is to  permit seamless data visualization and exploratory data analysis of the human genome within the larger Julia data science and OpenMendel ecosystems. The package provides convenient wrapper functions for wrangling genetic association results and  plotting them using Makie.jl. Every component of a figure  can be easily customized and extended, and the package generates high-quality, publication-ready figures. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: \"mhc\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Getting started\nPlease peruse the documentations of  Makie.jl,  CSV.jl,  DataFrames.jl,  and SnpArrays.jl.  Familiarity with these packages will allow visualization of most types of genetic and genomic data.  Makie.jl's default layout tools are particularly useful for  plotting different genetic and genomic data modalities as separate layers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: An usage case\nIf you have run a genome-wide association study (GWAS) at the variant-level,  and you would like to eyeball genome-wide significant loci across hundreds of phenotypes, then you are in the right place.","category":"page"}]
}
